<% layout('/layout/boilerplate.ejs') %>

<style>
    body { 
        margin-top: 20px; 
        background-color: #0e0f0f;
        font-family: Arial, sans-serif;
    }
    .profile-image { 
        height: 50px; 
        width: 50px; 
        object-fit: cover; 
        border-radius: 50%; 
        margin-right: 10px;
    }
    .post {
        margin-left: -200;
        background: #0e0f0f;
        max-width: 80%; /* corrected to fit container */
        margin-bottom: 20px;
        padding: 15px;
        border-radius: 8px;
        display: flex;
        color: #dfe1e5;
        align-items: flex-start;
        position: relative;
    }
    .author { 
        font-weight: bold; 
        font-size: 16px;
    }
    .handle {
        color: #657786;
        font-size: 14px;
        margin-left: 5px;
    }
    .content { 
        color: #ffffff; 
        font-size: 15px;
        line-height: 1.4;
        margin: 10px 0;
    }
    .content {
    margin-left: 20px; /* Add space between the vertical line and content */
}
    .time { 
        position: absolute;
        right: 17px;
        font-size: 12px; 
        color: #888; 
        white-space: nowrap;
    }
    .trash{
        top: 34;
        right: -8;
        cursor: pointer;
        width: 20px;
        height: 20px;
        fill: #657786;
    }
    .container-tweet { 
        width: 100%; 
        position: relative;
        margin: 0 auto;
        top: -50px;
        padding: 20px;
    }
    .actions {
        display: flex;
        align-items: center;
        gap: 30px;
        margin-top: 10px;
    }
    .actions svg {
        width: 20px;
        height: 20px;
        cursor: pointer;
        fill: #657786;
    }
    .actions svg:hover {
        fill: #1da1f2;
    }
    .create-post { 
        position: fixed; 
        bottom: 20px; 
        right: 20px; 
        background-color: #ef73ff; 
        color: white; 
        padding: 10px 20px; 
        border: none; 
        border-radius: 50px; 
        font-size: 16px;
        cursor: pointer;
    }
    .create-post:hover { 
        background-color: #0a85d0; 
    }
    .modal {
        display: none;
        position: fixed;
        z-index: 999;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
    }
 
 
    .form-group {
        margin-bottom: 15px;
    }
    .form-group label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
    }
    .preview-img {
        width: 100%;
        max-height: 300px;
        object-fit: cover;
        margin-top: 10px;
    }
    .transparent-textarea {
        border: 1px solid #ef73ff;
        background: none;
        /* border: none; */
        color: #dfe1e5;
        border-radius: 10px;
        font-size: 16px;
        width: 100%;
        padding: 10px;

        resize: none;
    }
    .transparent-textarea:focus {
        outline: none;
        border: 1px solid #ef73ff;
        padding: 10px;
    }
    #imageInput {
        display: none; 
    }
      
    .upload-btn {
        background-color: #0e0f0f;
        color: white;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        border: none;
    }
    .submitPost:hover{
        background-color: #ef73ff;
        color: #0e0f0f;
    }
    .submitPost{
        background-color: #0e0f0f; color: ef73ff; border: 1px solid #ef73ff;
    }
    .post:hover{
        /* make the transition faster and make it up more */
        transform: scale(1.01);
    }
    .modal-content {
        display: flex;
        padding: 10px;
        flex-direction: column;
        background-color: #0e0f0f;
        padding: 20px;
        width: 400px;
        max-width: 90%;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.create-tweet {
    font-size: 1.5rem;
    margin: 0;
}

.close-btn {
    cursor: pointer;
    color: #888;
    font-size: 1.2rem;
    margin-left: 10px;
}

.close-btn:hover {
    color: #000;
}
.post-image{
    cursor: pointer;
    max-width: 80%;
    max-height: 430px;
}
 .post-info{
    margin-top: 9px;
 }
.vertical-line-container {
    position: relative;
    width: 50px; /* Adjust width for the avatar spacing */
}

.vertical-line {
    height: -webkit-fill-available;
    background-color: #ef73ff;
    width: 2px;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 50%; /* Centers the line in the container */
}


.profile-image {
    height: 50px;
    width: 50px;
    object-fit: cover;
    border-radius: 50%;
    margin-right: 15px;
    margin-top: 10px; /* ensure the avatar aligns properly */
}
.profile-image {
    margin-bottom: 10px;
}
.post {
    display: flex;
    align-items: flex-start;
    padding-left: 20px; /* Adjust the padding for better alignment */
    position: relative;
}

 

.author {
    font-weight: bold;
    font-size: 16px;
}

.time {
    font-size: 12px;
    color: #888;
    margin-top: 2px;
}
.actions {
    display: flex;
    gap: 30px;
    margin-top: 10px;
    color: #657786;
}
.actions svg {
    width: 20px;
    height: 20px;
    cursor: pointer;
}

.actions svg:hover {
    fill: #1da1f2;
}

.actions .like-btn, .actions .reply-btn {
    display: flex;
    align-items: center;
    gap: 5px;
    cursor: pointer;
}

.liked {
        color: #ef73ff; /* Color for when the post is liked */
        fill: #ef73ff; /* Change the color of the heart icon */
    }
.actions .like-btn:hover, .actions .reply-btn:hover {
    color: #1da1f2;
}

.d-flex {
    display: flex;
    align-items: center;
    margin-left: 20px;
}
.t-card {
    position: relative;
    padding: 20px;
    display: flex;
    border-radius: 8px;
    width: 100%;
    min-height: 150px;    
}
</style>

<body>
    <% 
        const gettimeapprox = (date) => {
            const time = new Date(date).getTime();
            const now = new Date().getTime();
            const diff = now - time;
            const seconds = Math.floor(diff / 1000);
            const minutes = Math.floor(seconds / 60);
            const hours = Math.floor(minutes / 60);
            const days = Math.floor(hours / 24);
            if (seconds < 60) {
                return `${seconds} seconds ago`;
            } else if (minutes < 60) {
                return `${minutes} minutes ago`;
            } else if (hours < 24) {
                return `${hours} hours ago`;
            } else {
                return `${days} days ago`;
            }
        } 
    %>
<div class="container-tweet">
    <%if(getTweet &&  getTweet.length>0){%>
        <% getTweet.forEach(t => { %>
            <div class="post"  data-id="<%=t._id%>">
                <div class="t-card">
                    <div class="vertical-line-container"> 
                        <img src="<%=t.posted_by.avatar%>" alt="Profile Image" class="profile-image">
                        <hr class="vertical-line"></hr> 
                    </div>
                    <div class="post-info">
                        <div class="d-flex align-items-center">
                            <span class="author"><%=t.posted_by.username%></span>
                            
                            <% if (req.user && req.user.id === t.posted_by._id.toString()) { %>
                                <span class="delete-btn time trash" onclick="deletePost('<%= t._id %>')">
                                    <i class="fas fa-trash"></i>
                                </span>
                            <% } %>
                            
                            <span class="time"><%=gettimeapprox(t.createdAt)%></span>
                        </div>
                            <a href="/t/r/<%=t._id%>">
                                <div class="content">
                                    <p><%=t.text%></p>
                                    <% if (t.img) { %>
                                        <img src="<%=t.img%>" alt="Post Image" class="post-image">
                                    <% } %>
                                </div>
                            </a>
                        <div class="actions">
                            <% console.log(t.likes)%>
                            <!-- Like and Reply buttons -->
                            <div class="like-btn <% t.likes ? 'liked':'' %>"   >
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M14.752 11.168l-5.477 5.479a2.121 2.121 0 01-3 0 2.121 2.121 0 010-3l5.477-5.478m1.414-1.414a2.121 2.121 0 013 0 2.121 2.121 0 010 3l-5.478 5.477" />
                                </svg>
                                <span>Like</span>
                            </div>
                            <div class="reply-btn">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M5.25 8.25h13.5M12 15.75l-6.75-6.75 6.75 6.75zm6.75 0l-6.75-6.75 6.75 6.75z" />
                                </svg>
                                <span>Reply</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
        <% }) %>
    <% } %>
    
</div>

<!-- Create Post Button -->
<button class="btn create-post">Create Post</button>

<!-- Modal -->
<div id="createPostModal" class="modal">
    <div class="modal-content">
        <span class="close-btn">&times;</span>
        <p class="create-tweet">Create New Post</p>
        
        <div class="form-group mt-2">
            <label for="postText" hidden>Post Text:</label>
            <textarea id="postText" rows="4" placeholder="What's happening?" class="transparent-textarea"></textarea>
        </div>

        <div class="form-group">
            <button id="uploadBtn" class="upload-btn">
                <i class="fa-solid fa-images"></i>
            </button>
            <input type="file" id="imageInput" accept="image/*">
        </div>

        <div class="form-group">
            <img id="imagePreview" class="preview-img" src="" alt="Image Preview" style="display: none;">
        </div>

        <button id="submitPost" class="btn submitPost" >Submit Post</button>
    </div>
</div>

<div id="replyModal" class="modal">
    <div class="modal-content">
        <span class="close-btn">&times;</span>
        <p class="create-tweet">Reply to Post</p>

        <div class="form-group mt-2">
            <label for="replyText" hidden>Reply Text:</label>
            <textarea id="replyText" rows="4" placeholder="Write your reply..." class="transparent-textarea"></textarea>
        </div>

        <button id="submitReply" class="btn submitPost">Submit Reply</button>
    </div>
</div>


</body>

<script>
    // Modal handling
    const createPostBtn = document.querySelector('.create-post');
    const modal = document.getElementById('createPostModal');
    const closeModalBtn = document.querySelector('.close-btn');
    const imageInput = document.getElementById('imageInput');
    const imagePreview = document.getElementById('imagePreview');
    const uploadBtn = document.getElementById('uploadBtn');
    const likeButton = document.querySelector('.like-btn');
    createPostBtn.addEventListener('click', function() {
        modal.style.display = 'flex';
    });

    // Close modal when 'x' button is clicked
    closeModalBtn.addEventListener('click', function() {
        modal.style.display = 'none';
        resetForm();
    });
    document.querySelectorAll('.like-btn').forEach(button => {
        button.addEventListener('click', function() {
            const postId = this.closest('.post').dataset.id; // Get the post ID
            const likeIcon = this.querySelector('svg'); // Get the SVG inside the button
            const isLiked = this.classList.contains('liked'); // Check if it's already liked

            // Make a fetch request to like/unlike the post
            fetch(`/t/${postId}/likeunlike`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ postId })
            })
            .then(response => response.json())
            .then(data => {
                console.log(data, "data");
                if (data.message === "success") {
                    this.classList.toggle('liked');
                } else {
                    console.error('Error liking/unliking the post');
                }
            })
            .catch(error => console.error('Error:', error));
        });
    });

    function deletePost(postId) {
        fetch(`/t/${postId}`, {
            method: 'DELETE',
        })
        .then(response => response.json())
        .then(data => {
            if (data.message === 'success') {
                alert('Post deleted successfully');
                // Optionally remove the post from the UI
                document.querySelector(`[data-id="${postId}"]`).remove();
            } else {
                alert('Error deleting post');
            }
        })
        .catch(error => console.error('Error:', error));
    }

    const replyModal = document.getElementById('replyModal');
    const closeReplyModalBtn = replyModal.querySelector('.close-btn');
    const replyText = document.getElementById('replyText');

    document.querySelectorAll('.reply-btn').forEach(button => {
        button.addEventListener('click', function() {
            const postId = this.closest('.post').dataset.id; // Get post ID for the reply
            replyModal.style.display = 'flex';

            // Handle reply submission
            document.getElementById('submitReply').addEventListener('click', function() {
                fetch(`/t/${postId}/reply`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ replyText: replyText.value })
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Reply posted:', data);
                    replyModal.style.display = 'none';
                    replyText.value = ''; // Reset the textarea after submission
                });
            });
        });
    });

 
    // Close modal when user clicks outside the modal content
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
            resetForm();
        }
    });
    closeReplyModalBtn.addEventListener('click', function() {
        replyModal.style.display = 'none';
    });

    // Close modals by clicking outside of them
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
        if (event.target === replyModal) {
            replyModal.style.display = 'none';
        }
    });
    // Handle file upload button click
    uploadBtn.addEventListener('click', function() {
        imageInput.click(); 
    });

    // Image preview
    imageInput.addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = 'block';
            };
            reader.readAsDataURL(file);
        } else {
            imagePreview.src = '';
            imagePreview.style.display = 'none';
        }
    });

    // Reset form when closing the modal
    function resetForm() {
        document.getElementById('postText').value = '';
        imageInput.value = '';
        imagePreview.src = '';
        imagePreview.style.display = 'none';
    }

    // Handle post submission
    const submitPostBtn = document.getElementById('submitPost');
    submitPostBtn.addEventListener('click', async function () {
        const postText = document.getElementById('postText').value;
        const imageSrc = imagePreview.src;

        // Only consider imagePreview.src if it contains a valid image source
        if (postText.trim() === '' && (!imageSrc || imageSrc === null)) {
            return;
        }

        const userId = window.location.pathname.split('/')[2];

        const formData = new FormData();
        formData.append('postText', postText);
        
        // Check if imageSrc is a valid image source or the default value of imagePreview.src, and then set it to null
        const postImage = (imageSrc && imageSrc !== window.location.href) ? imageSrc : null;
        
        // Call the function to post the tweet
        const newTweet = await postTweet(postText, postImage, userId);
        console.log(newTweet);
        
        if (newTweet) {
            appendNewTweet(newTweet);
            modal.style.display = 'none';
            resetForm();
        }
    });

    const gettimeapprox = (date) => {
            const time = new Date(date).getTime();
            const now = new Date().getTime();
            const diff = now - time;
            const seconds = Math.floor(diff / 1000);
            const minutes = Math.floor(seconds / 60);
            const hours = Math.floor(minutes / 60);
            const days = Math.floor(hours / 24);
            if (seconds < 60) {
                return `${seconds} seconds ago`;
            } else if (minutes < 60) {
                return `${minutes} minutes ago`;
            } else if (hours < 24) {
                return `${hours} hours ago`;
            } else {
                return `${days} days ago`;
            }
        } 
const postTweet = async (postText, urlImg, userId) => {
    try {
        const res = await fetch(`/t/${userId}`, {
            method: 'POST',
            body: JSON.stringify({
                postText: postText,
                postImage: urlImg || null,
            }),
            headers: {
                'Content-type': 'application/json',
            },
        });

        const data = await res.json();
        console.log(data.newPost,"data");
        return data.newPost;  
    } catch (error) {
        console.error('Error posting tweet:', error);
    }
};

// Function to append a new tweet dynamically to the DOM
function appendNewTweet(tweet) {
    const tweetContainer = document.querySelector('.container-tweet');

    // Create the new post HTML
    const newPost = document.createElement('div');
    newPost.classList.add('post');
console.log(tweet.posted_by,"tweet.posted_by")
    const tweetHTML = `
        <div class="t-card">
            <div class="vertical-line-container">
                <img src="${tweet.posted_by.avatar}" alt="Profile Image" class="profile-image">
                <hr class="vertical-line"></hr>
            </div>
            <div class="post-info">
                <div class="d-flex align-items-center">
                    <span class="author">${tweet.posted_by.username}</span>
                    <span class="time">${gettimeapprox(tweet.createdAt)}</span>
                </div>
                <div class="content">
                    <p>${tweet.text}</p>
                    ${tweet.img ? `<img src="${tweet.img}" alt="Post Image" class="post-image">` : ''}
                </div>
                <div class="actions">
                    <div class="like-btn">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M14.752 11.168l-5.477 5.479a2.121 2.121 0 01-3 0 2.121 2.121 0 010-3l5.477-5.478m1.414-1.414a2.121 2.121 0 013 0 2.121 2.121 0 010 3l-5.478 5.477" />
                        </svg>
                        <span>Like</span>
                    </div>
                    <div class="reply-btn">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M5.25 8.25h13.5M12 15.75l-6.75-6.75 6.75 6.75zm6.75 0l-6.75-6.75 6.75 6.75z" />
                        </svg>
                        <span>Reply</span>
                    </div>
                </div>
            </div>
        </div>
    `;

    newPost.innerHTML = tweetHTML;

    // Append the new post to the container
    tweetContainer.prepend(newPost);
}


</script>
