<% layout('/layout/boilerplate.ejs') %>
<script>
    const sidebar = document.querySelector('.sidebar');
    sidebar.remove();
</script>
<style>
  :root {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  font-family: "Righteous", sans-serif !important; 
  font-weight: bold;
  font-size: 16px;
}

.cont {
  box-sizing: border-box;
  margin-bottom: -1000px;
  width: 100%;
  display: flex;
  flex-direction: row; /* Stack sidebars next to the chat on larger screens */
  color: #333;
}

.chat-sidebar {
  width: 84px;
  height: 657px;
  top: 64px;
  gap: 0px;
  opacity: 0px;
  background: #0e0f0f;
  color: #333;
  padding: 20px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.chat-sidebar a {
  color: #d6d6d6;
  text-decoration: none;
  display: block;
  margin: 15px 0;
}

.logos {
  margin-top: 27px;
  width: 320px;
  height: 657px;
  top: 64px;
  left: 84px;
  gap: 0px;
  opacity: 0px;
  background-color: #0e0f0f;
  color: #333;
  padding: 20px;
  box-sizing: border-box;
  overflow-y: auto;
}

.logos .person {
  margin-top: 30px;
  height: 47px;
  display: flex;
  align-items: center;
  padding: 10px;
  color: rgb(255, 244, 244);
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.logos .person:hover {
  background-color: #ef73ff;
  color: #0e0f0f;
}

.chat-container {
  margin-top: 27px;
  background-image: url('https://theabbie.github.io/blog/assets/official-whatsapp-background-image.jpg');
  background-repeat: no-repeat;
  background-size: cover;
  width: 100%;
  background-color: #0e0f0f;
  padding: 20px;
  box-sizing: border-box;
  border-left: 1px solid #ef73ff;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.messages {
  height: 400px;
  overflow-y: auto;
  -ms-overflow-style: none;
  scrollbar-width: none;
  flex-grow: 1;
  margin-bottom: 20px;
}

.messages::-webkit-scrollbar {
  display: none;
}

.message {
  position: relative;
  margin: 15px 0;
  padding-left: 18px;
  padding-top: 6px;
  padding-bottom: 6px;
  padding-right: 18px;
  border-radius: 15px;
  max-width: fit-content;
  background-color: #f5f5f5;
}

.sender-user {
  background-color:#414141;
  color: white;
  margin-left: auto;
  text-align: left;
}

.receiver-user {
  background-color: #FFFFFF;
  color: #000000;
  margin-right: auto;
  text-align: left;
}

/* Media Queries for responsiveness */
@media (max-width: 768px) {
  .cont {
    flex-direction: column; /* Stack elements vertically on smaller screens */
  }

  .chat-sidebar {
    width: 100%;
    height: auto;
    padding: 10px;
    display: flex;
    justify-content: center;
    gap: 10px;
  }

  .logos {
    width: 100%;
    height: 200px; /* Adjust height for smaller screens */
    padding: 10px;
    display: flex;
    overflow-x: auto; /* Horizontal scroll for contacts */
    gap: 10px;
  }

  .logos .person {
    height: 80px;
    flex-direction: column; /* Stack avatar and username vertically */
    justify-content: center;
  }

  .chat-container {
    width: 100%;
    padding: 10px;
    height: calc(100vh - 200px); /* Ensure the chat fills the available screen space */
  }

  .send {
    display: flex;
    width: 100%;
    padding: 10px;
  }

  #messageInput {
    width: calc(100% - 70px); /* Adjust input width */
  }

  #sendButton {
    width: 60px;
  }
}

@media (max-width: 480px) {
  .chat-container {
    padding: 5px;
  }

  .logos {
    height: 150px; /* Further reduce contact list height */
  }

  .logos .person {
    height: 60px;
    font-size: 12px;
  }

  #messageInput {
    height: 36px;
  }

  #sendButton {
    width: 50px;
    height: 36px;
  }

  .message {
    font-size: 14px;
    padding: 10px;
  }
}

</style>
<style>
  :root {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    font-family: "Righteous", sans-serif !important; 
      font-weight: bold;
      font-size: 16px;
  }
  .cont {
    box-sizing: border-box;
    margin-bottom: -1000px;
    width: 100%;
    display: flex;
    color: #333;
  }

  .chat-sidebar {
    width: 84px;
    height: 657px;
    top: 64px;
    gap: 0px;
    opacity: 0px;
    background: #0e0f0f;
    color: #333;
    padding: 20px;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .chat-sidebar a {
    color: #d6d6d6;
    text-decoration: none;
    display: block;
    margin: 15px 0;
  }

  .chat-sidebar i {
    font-size: 24px;
  }

  .chat-sidebar p {
    margin: 5px 0 0;
  }

  .logos {
    margin-top: 27px;
    width: 320px;
    height: 657px;
    top: 64px;
    left: 84px;
    gap: 0px;
    opacity: 0px; 
      background-color: #0e0f0f;
    color: #333;
    padding: 20px;
    box-sizing: border-box;
    overflow-y: auto;
  }

  .logos .person {
    margin-top: 30px;
    height: 47px;
    display: flex;
    align-items: center;
    padding: 10px;
    color: rgb(255, 244, 244);
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .logos .person:hover {
    background-color: #ef73ff;
    color:#0e0f0f;
  }

  .logos .person img {
    border-radius: 50%;
    margin-right: 10px;
  }

  .chat-container {
    margin-top: 27px;
    background-image: url('https://theabbie.github.io/blog/assets/official-whatsapp-background-image.jpg');
    background-repeat: no-repeat;
    background-size: cover;
    
    width: 100%;
    background-color: #0e0f0f;
    padding: 20px;
    box-sizing: border-box;
    border-left: 1px solid #ef73ff;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  
  .chat-container h2 {
    margin-bottom: 0;
    font-size: 24px;
    color: #fff7f7;
    font: bold;
    font-weight: 700;
  }
  .chat-container p {
    margin-bottom: 0;
    color: #f6c9c9;

    font: bold;
  }
  .send input:focus {
    outline: none;
  }
  .send input {
    width: calc(100% - 80px);
    height: 42px;
    padding: 10px;
    border: 2px solid #ef73ff;

    border-radius: 5px;
}
#sendButton {
    width: 60px;
    height: 42px;
    background-color: #ef73ff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

 

  .send button {
    padding: 10px;
    border: 1px solid #ccc;
    background-color: ef73ff;
    color: #fff;
    border-radius: 0 5px 5px 0;
    cursor: pointer;
  }

  .send button:hover {
    background-color: #0056b3;
  }

  .messages {
    height: 400px;  
    overflow-y: auto; 
    -ms-overflow-style: none;  
    scrollbar-width: none;    
    flex-grow: 1;  
    margin-bottom: 20px;
}

.messages::-webkit-scrollbar {
    display: none;   
}


  .message {
    position: relative;
    margin: 15px 0;
    padding-left: 18px;
    padding-top: 6px;
    padding-bottom: 6px;
    padding-right: 18px;
    border-radius: 15px;
    max-width: fit-content;
    background-color: #f5f5f5;
  }

  .message:hover .delete-btn {
    display: block;
  }

  .delete-btn {
    display: none;
    position: absolute;
    top: 5px;
    left: 22px;
    background: #ff4d4d;
    color: white;
    border: none;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    cursor: pointer;
    font-size: 12px;
    line-height: 24px;
    text-align: center;
  }
.cont{
  margin-top: -50px;
  position: absolute;
  left: 0;
}
.sender-user {
    font-family: "Righteous", sans-serif !important; 
    font-size: 16px;
    font-weight: 700;
    background-color: #0e0f0f;
    color: white;
    margin-left: auto;
    text-align: left;
  }

  .receiver-user {
    background-color: #FFFFFF;
    color: #000000;
    margin-right: auto;
    text-align: left;
  }

#notification {
      display: none;
      padding: 10px;
      background-color: yellow;
      border: 1px solid black;
      margin: 10px 0;
}
.blue{
  background-color: ef73ff;
  color: white;
  padding: 15px;
  border-radius: 50%;
  text-decoration: none;
  display: flex;
  align-items: center;
  justify-content: center;
}
.dot{
  margin-left: 55px;
  height: 10px;
  width: 10px;
  background-color: green;
  border-radius: 50%;
  display: inline-block;
}
sub{
  font-size: .60em!important;
  float: right!important;
}
.search-chat-btn{
  color: #fff;
  font-weight: 600;
  margin-left: 10px;
  width: 60px;
  border-radius: 50%;
  height: 36px;
  opacity: 0px;
  background: #0e0f0f;
}
.person.active {
  border-left: 5px solid #ef73ff;
}
</style>
<body>
  <div class="cont">
    <div class="chat-sidebar">
      <div class="text-center pt-4 margin pb-3">
        <a href="/<%= req.user._id %>/chat">
          <div class="blue">
            <i class="fa-solid fa-message"></i>
          </div>
        </a>
      </div>
      <div class="text-center pt-3 pb-3">
        <a href="/<%= req.user._id %>/chat/all">
          <i class="fa-solid fa-plus"></i>
        </a>
      </div>
    </div>

    <div class="logos">
      <form id="searchForm" class="d-flex ms-auto" role="search" action="/user/<%= req.user._id %>/search/chat" method="GET">
          <input class="form-control search-inp" type="search" id="searchInput" name="title" placeholder="Search" aria-label="Search">
          <button class="btn search-chat-btn" type="submit"><i class="fa-solid fa-magnifying-glass"></i></button>
      </form>
      <% if (userchat.length > 0) {  %>
        <% userchat.forEach(chat => { %>
          <div class="person" data-userid="<%= chat._id %>" data-username="<%= chat.username %>">
            <img src="<%= chat.avatar %>" alt="" width="30" height="30">
            <span><%= chat.username %></span>
            <sub class="<%= chat.is_online ? 'text-success' : 'text-danger' %>"><%= chat.is_online ? 'Online' : 'Offline' %></sub>
            <span class="notification-badge" style="<%= chat.hasUnseenMessages ? 'display: inline;' : 'display: none;' %>">
              <div class="dot"></div>
            </span>
          </div>
        <% }) %>
      <% } %>
    </div>

    <div class="chat-container">
      <h2>Select a user to start chatting</h2>
      <div id="messages" class="messages"></div>
      <div id="notification" class="notification"></div>
    </div>
  </div>
</body>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const sender_id = '<%= req.user._id %>';
    let receiver_id = '';
    let currentChatUser = '';

    const socket = io('/users-namespace', {
        auth: {
            userId: sender_id
        }
    });

    socket.on('user status', function(data) {
        const { userId, is_online } = data;
        const personElement = document.querySelector(`.logos .person[data-userid="${userId}"]`);
        if (personElement) {
            const statusElement = personElement.querySelector('sub');
            if (statusElement) {
                statusElement.textContent = is_online ? 'Online' : 'Offline';
                statusElement.className = is_online ? 'text-success' : 'text-danger';
            }
        }
    });

    socket.on('chat message', function(data) {
        if (data.sender_id === receiver_id || data.to === receiver_id) {
            addMessageToChat(data);
        }
    });

    socket.on('loadChats', function(messages) {
        console.log('Received messages:', messages); // Debugging line
        const messagesContainer = document.getElementById('messages');
        messagesContainer.innerHTML = '';
        messages.forEach(msg => {
            console.log('Message:', msg); // Debugging line
            if (msg.sender_id === receiver_id || msg.receiver_id === receiver_id) {
                const messageElement = document.createElement('div');
                messageElement.className = msg.sender_id === sender_id ? 'message sender-user' : 'message receiver-user';
                messageElement.innerHTML = `
                    <span>${msg.sender_id === sender_id ? 'You' : msg.sender_username}: ${msg.message}</span>
                    ${msg.sender_id === sender_id ? '<button class="delete-btn" data-message-id="' + msg._id + '">x</button>' : ''}
                `;
                messagesContainer.appendChild(messageElement);
            }
        });
        messagesContainer.scrollTop = messagesContainer.scrollHeight; // Scroll to the bottom
      });

    socket.on('new message notification', function(data) {
        const personElement = document.querySelector(`.logos .person[data-username="${data.from_username}"]`);
        if (personElement) {
            const notificationBadge = personElement.querySelector('.notification-badge');
            if (notificationBadge) {
                notificationBadge.style.display = 'inline';
            }
        }
    });

    function addMessageToChat(data) {
        const messages = document.getElementById('messages');
        const messageElement = document.createElement('div');
        messageElement.className = data.sender_id === sender_id ? 'message sender-user' : 'message receiver-user';
        const isOwnMessage = data.sender_id === sender_id;
        console.log(data)
        const messageText = `${isOwnMessage ? 'You' : data.from_username}: ${data.message}`;
        messageElement.textContent = messageText;
        if (isOwnMessage) {
            const deleteButton = document.createElement('button');
            deleteButton.className = 'delete-btn';
            deleteButton.setAttribute('data-message-id', data.message_id || '');
            deleteButton.textContent = 'x';
            messageElement.appendChild(deleteButton);
        }
        messages.appendChild(messageElement);
        messages.scrollTop = messages.scrollHeight;
    }

    const people = document.querySelectorAll('.person');
    const chatContainer = document.querySelector('.chat-container');
    let activePerson = null; 
    people.forEach(person => {
        person.addEventListener('click', function() {
            // add border to the clicked person
            if (activePerson) {
              activePerson.classList.remove('active');
            }
            this.classList.add('active');
            activePerson = this;
            const username = this.getAttribute('data-username');
            const newReceiverId = this.getAttribute('data-userid');
            if (receiver_id !== newReceiverId) {
                receiver_id = newReceiverId;
                currentChatUser = newReceiverId;
                chatContainer.innerHTML = `
                    <h2>Chat with ${username}</h2>
                    <p>Keep your conversation long-lasting</p>
                    <div id="messages" class="messages"></div>
                    <div class="send">
                        <input type="text" id="messageInput" placeholder="Type your message here...">
                        <button type="submit" id="sendButton">Send</button>
                    </div>
                `;

                const sendButton = document.getElementById('sendButton');
                const messageInput = document.getElementById('messageInput');

                function sendMessage(event) {
                    event.preventDefault();
                    const message = messageInput.value.trim();
                    if (message) {
                        // Immediately add the new message element
                        const messages = document.getElementById('messages');
                        const newMessageElement = document.createElement('div');
                        newMessageElement.className = 'message sender-user';
                        newMessageElement.innerHTML = `
                            <span>You: ${message}</span>
                            <button class="delete-btn" data-message-id="">x</button>
                        `;
                        messages.appendChild(newMessageElement);
                        messages.scrollTop = messages.scrollHeight; // Scroll to the bottom
                        sendButton.disabled = true;
                        messageInput.disabled = true;

                        $.ajax({
                            type: 'POST',
                            url: `/user/${receiver_id}/chat/save-message`,
                            data: { message: message },
                            success: function(response) {
                                messageInput.value = '';
                                newMessageElement.querySelector('.delete-btn').setAttribute('data-message-id', response.message_id);
                                sendButton.disabled = false;
                                messageInput.disabled = false;
                                messageInput.focus();
                                socket.emit('new chat message', {
                                    from: sender_id,
                                    to: receiver_id,
                                    message: message,
                                    message_id: response.message_id
                                });
                            },
                            error: function(error) {
                                sendButton.disabled = false;
                                messageInput.disabled = false;
                                messageInput.focus();
                            }
                        });
                    }
                }

                sendButton.addEventListener('click', sendMessage);
                messageInput.addEventListener('keypress', function(event) {
                    if (event.key === 'Enter' && !sendButton.disabled) {
                        sendMessage(event);
                    }
                });

                const notificationBadge = this.querySelector('.notification-badge');
                if (notificationBadge) {
                    notificationBadge.style.display = 'none';
                }

                socket.emit('mark as seen', { sender_id: sender_id, receiver_id: receiver_id });
                console.log(`${sender_id} has marked ${receiver_id} as seen`);
                $.ajax({
                    type: 'POST',
                    url: `/user/${receiver_id}/${sender_id}/chat/mark-seen`,
                    success: function(response) {
                        // Messages marked as seen
                    },
                    error: function(error) {
                        console.error('Error marking messages as seen:', error);
                    }
                });

                $.ajax({
                    type: 'POST',
                    url: `/user/${receiver_id}/chat/mark-opened`,
                    success: function(response) {
                        // Chat marked as opened
                    },
                    error: function(error) {
                        console.error('Error marking chat as opened:', error);
                    }
                });

                socket.emit('existchat', { sender_id: sender_id, receiver_id: receiver_id });
            }
        });
    });

    document.addEventListener('click', function(event) {
        if (event.target.classList.contains('delete-btn')) {
            const messageId = event.target.getAttribute('data-message-id');

            $.ajax({
                type: 'POST',
                url: `/user/${receiver_id}/chat/delete-message`,
                data: { messageId: messageId },
                success: function(response) {
                    if (response.success) {
                        event.target.closest('.message').remove();
                    }
                },
                error: function(error) {
                    console.error('Error deleting message:', error);
                }
            });
        }
    });
});
</script>