<% layout('layout/boilerplate') %>

<style>
  /* Like/Unlike Button */
.like, .subscribe {
    cursor: pointer;
    color: #ff0000; /* Active color */
    font-size: 24px;
    transition: color 0.3s ease-in-out;
}

.unlike, .unsubscribe {
    cursor: pointer;
    color: #ccc; /* Inactive color instead of black */
    transition: color 0.3s ease-in-out;
}
.container{
  position: absolute;
  top: 100px;
}
.like:hover, .subscribe:hover {
    color: #5680cf; /* Hover color when active */
}

.unlike:hover, .unsubscribe:hover {
    color: #999; /* Hover color when inactive */
}

 
 

.unlike:hover {
    color: #333;
}

 
.container {
    position: absolute;
    background: #0e0f0f;
    padding-left: 3%;
    margin-right: 0;
    left: 90px;
    padding-bottom: 68px;
}
body {
    font-family: Arial, sans-serif;
    color: #ffffffef;
    background-color: #121212;
    margin: 0;
    padding: 0;
}

/* Utility Classes */
.bg-red {
    background-color: rgb(9, 9, 9) !important;
}

.flex {
    display: flex;
}

.align-center {
    align-items: center;
}

.justify-between {
    justify-content: space-between;
}

.rounded {
    border-radius: 5px;
}

.shadow {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Video Player Section */
.video-container {
  width: 120%;
    margin: 0 auto;
    background: linear-gradient(to bottom right, #0e0f0f 75%, #ef73ff 25%) !important;
    padding: 20px;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
}
:root {
  --plyr-color-main: #ef73ff;
}
.video-details {
    flex: 3;
    padding: 20px;
    color: #ffffffef !important;
    background-color: #0e0f0f;
    border-radius: 10px;
    box-shadow: 0 2px 4px #ef73ff ;
    margin-bottom: 20px;
}

video {
    width: 100%;
    border-radius: 5px;
    margin-bottom: 20px;
}

h2 {
    text-align: center;
    color: #ffffffef;
    margin-top: 0;
}

p {
    color: #ffffffef;
    margin: 0;
}

/* Channel Info Section */
.channel-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
}

.channel-info p {
    display: flex;
    align-items: center;
    margin: 0;
}

.channel-info img.avatar {
    margin-right: 10px;
}

.right-side {
    display: flex;
    align-items: center;
}

.likes-count {
    margin-right: 20px;
    font-size: 16px;
}

.like-form {
    display: flex;
    align-items: center;
}

.material-icons {
    font-size: 24px;
    cursor: pointer;
}

.like:hover, .subscribe:hover {
    color: #5680cf;
}

.unlike, .unsubscribe {
    cursor: pointer;
    color: #000000;
    transition: color 0.3s;
}

.unlike:hover, .unsubscribe:hover {
    color: #333;
}
.channel-info .right-side {
    display: flex;
    align-items: center;
}

.channel-info .right-side p,
.channel-info .right-side form {
    margin-left: 20px;
}

/* Comments Section */
.comments {
    flex: 1;
    margin-left: 50px;
    background-color: #0e0f0f;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 4px #ffb3ff;
    margin-bottom: 20px;
}

h3 {
    color: #333;
    margin-bottom: 20px;
}

.comment-form {
    margin-top: 20px;
}

.comment-input-container {
    display: flex;
    align-items: center;
}

.comment-input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px 0 0 5px;
}

.send-button {
    background-color: #5680cf;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 0 5px 5px 0;
    cursor: pointer;
}

.all-comments {
    max-height: 400px;
    overflow-y: hidden;
    padding-right: 15px;
}

.card {
    padding: 5px;
    background-color: #0e0f0f;
    color: #ffffffef;
    box-shadow: 0 2px 4px #ef73ff;

    border-radius: 10px;
    overflow: hidden;
    margin-bottom: 20px;
    display: flex;
    flex-direction: column;
    transition: transform 0.3s;
}

.card:hover {
    transform: translateY(-5px);
}

.card-body {
    display: flex;
    justify-content: space-between; /* This ensures elements are spread */
    align-items: center;
    padding: 15px;
    flex-wrap: wrap; /* Wrap content to allow new input below */
}
.card-title {
    color: #ffffffef;
    margin: 0;
    flex: 1;
}

.card-text {
    color: #ffffffef;
    margin: 0;
    display: flex;
    align-items: center;
}

.card-img-top {
    object-fit: cover;
    height: 200px;
    width: 100%;
}

/* Nested Commenting */
.nested-comments {
    margin-left: 40px;
}

/* Like Buttons in Comments */
.comment-like-form button {
    background-color: transparent;
    border: none;
    color: inherit;
    cursor: pointer;
}

/* Video Suggestions (Other Videos Section) */
.other-videos {
    padding: 20px 0;
    width: 100%;
}
.delete-btn-comment{
    cursor: pointer;
    color: #fff;
    border-radius: 5px;
    padding: 5px 10px;

}
.other-videos .other-container {
  margin-top: 50px;
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
}

.other-videos .card-wrapper {
    flex: 1 1 calc(33.333% - 20px);
    box-sizing: border-box;
    border: 
}
.comments h3{
  color: #ccc;
}
.rounded-circle {
    border-radius: 50%;
}

/* Responsive Styles */
@media (max-width: 1024px) {
    .video-container {
        flex-direction: column;
    }
    .container {
        /* flex-direction: column; */
        /* position: absolute; */
        left: 0;
    }
    .other-videos,.video-container{
      width: 90%;
    }
    .video-details, .comments {
        width: 100%;
        margin-bottom: 20px;
    }
}

@media (max-width: 768px) {
  .other-videos .card-wrapper {
    flex: 1 1 calc(50% - 20px);
  }
  .video-details, .comments {
    margin-top: 15px;
    margin-left: 0;
  }
  .comment-input-container input{
    width: 90%;
  }
}

@media (max-width: 480px) {
    .other-videos .card-wrapper {
        flex: 1 1 100%;
    }

    .channel-info {
        flex-direction: column;
    }

    .channel-info p, .channel-info .right-side {
        margin-top: 10px;
    }
}
.plyr__controls {
    background-color: #121212;
    /* Change control background color if necessary */
  }

  .plyr--full-ui input[type=range] {
    color: #ef73ff;
    /* Change the color of range inputs like volume and progress bars */
  }

  /* Changing the hover and active state of control buttons */
  .plyr__controls button {
    color: #ef73ff;
    /* Set button icons to your color */
    transition: color 0.3s ease;
  }

  .plyr__controls button:hover,
  .plyr__controls button:focus {
    color: #ffb3ff;
    /* Slightly lighter color on hover */
  }
</style>
<body>
  <div class="video-container">
    <div class="video-details">
      <div class="video">
        <video id="player" playsinline controls data-poster="<%= video.thumbnail %>">
          <source src="<%= video.videoFile %>?q_auto:low" type="video/mp4" data-quality="low"/>
          <source src="<%= video.videoFile %>?q_auto:eco" type="video/mp4" data-quality="eco"/>
          <source src="<%= video.videoFile %>?q_auto:best" type="video/mp4" data-quality="best"/>
          <track kind="captions" label="English captions" src="/path/to/captions.vtt" srclang="en" default />
        </video>
      </div>
      <h2><%= video.title %></h2>
      <div class="channel-info">
        <p>
          <img src="<%= video.owner.avatar %>" id="avatarr-click" width="50" height="50" class="avatar" alt="">
          <span><%= video.owner.username %></span>

        </p>
        <div class="right-side">
          <p class="likes-count"><%= likesCount %> likes</p>
          <form action="/toggle/v/<%= video._id %>" method="POST" class="like-form">
              <span class="material-icons like-button">
                  <% if (currentUser && Array.isArray(video.likes) && video.likes.includes(currentUser._id)) { %>
                      <span class="material-icons unlike">thumb_up</span>
                  <% } else { %>
                      <span class="material-icons like">thumb_up_off_alt</span>
                  <% } %>
              </span>
          </form>
          <% if (String(currentUser._id) !== String(video.owner._id)) { %>
            <form action="/s/<%= video.owner._id %>" method="POST">
              <% if (currentUser && subscribed) { %>
                <span class="material-icons unsubscribe">notifications_off</span>
              <% } else { %>
                <span class="material-icons subscribe">notifications</span>
              <% } %>
            </form>
          <% } %>
      </div>

      </div>
      <p>Description: <%= video.description %></p>
    </div>
    <div class="comments">
      <h3>Comments</h3>
      <form class="comment-form" action="/v/<%= video._id %>" method="POST">
        <div class="comment-input-container">
          <input class="comment-input" type="text" name="content" placeholder="Write a comment..." required>
          <button class="send-button" type="submit">Send</button>
        </div>
      </form>
      <div class="all-comments">
        <%- include('../include/comments.ejs', { comments: comments, videoId: video._id }) %>
      </div>
    </div>
    <div class="other-videos">
      <div class="other-container">
        <% otherVideos.forEach(otherVideo => { %>
          <div class="card-wrapper">
            <a href="/user/<%= otherVideo.owner._id %>/videos/<%= otherVideo._id %>">
              <div class="card" style="height: 300px;">
                <img class="card-img-top" src="<%= otherVideo.thumbnail %>" alt="Card image cap">
                <div class="card-body">
                  <p class="card-text">
                    <img src="<%= otherVideo.owner.avatar %>" width="30" height="30" class="rounded-circle" alt="">
                  </p>
                  <h5 class="card-title"><%= otherVideo.title && otherVideo.title.length > 28 ? otherVideo.title.slice(0, 28) + '...' : otherVideo.title %></h5>
                </div>
              </div>
            </a>
          </div>
        <% }) %>
      </div>
    </div>
  </div>
</body>
<script src="https://cdn.plyr.io/3.7.8/plyr.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const likeForms = document.querySelectorAll('.like-form');
    
    likeForms.forEach(form => {
      form.addEventListener('click', function(event) {
        event.preventDefault();
        const likesCountElement = document.querySelector('.likes-count');
        fetch(form.action, {
          method: form.method,
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(Object.fromEntries(new FormData(form)))
        }).then(response => response.json())
        .then(data => {
          if (data.success) {
            const likeIcon = form.querySelector('.material-icons');
            likeIcon.textContent = likeIcon.textContent === 'thumb_up' ? 'thumb_up_off_alt' : 'thumb_up';
            likesCountElement.textContent = `${data.likesCount} likes`;
          } else {
            alert(data.message);
          }
        });
      });
    });
  
    const subscribeButtons = document.querySelectorAll('.subscribe, .unsubscribe');

    subscribeButtons.forEach(button => {
      button.addEventListener('click', function(event) {
        event.preventDefault();
        const form = button.closest('form');
        
        fetch(form.action, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        }).then(response => response.json())
        .then(data => {
          if (data.success) {
            // Toggle the button text/content based on success response
            if (data.subscribed) {
              button.textContent = 'notifications_off';
              button.classList.remove('subscribe');
              button.classList.add('unsubscribe');
            } else {
              button.textContent = 'notifications';
              button.classList.remove('unsubscribe');
              button.classList.add('subscribe');
            }
            // Update likesCount or any other relevant UI elements
            const likesCountElement = document.querySelector('.likes-count');
            likesCountElement.textContent = `${data.likesCount} likes`;
          } else {
            alert(data.message);
          }
        });
      });
    });

    const avaClick = document.querySelector('#avatarr-click');
    avaClick.addEventListener('click', () => {
      window.location.href = `/user/<%= req.user._id %>/dashboard/<%= video.owner.username %>`;
    });
  
    const deleteBtns = document.querySelectorAll('.delete-btn-comment');
    deleteBtns.forEach(btn => {
      btn.addEventListener('click', async (event) => {
        event.preventDefault();
        const commentId = btn.getAttribute('data-comment-id');
        if (commentId) {
          try {
            const response = await fetch(`/comments/${commentId}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              },
            });
            if (response.ok) {
              const commentElement = btn.closest('.card-body');
              commentElement.remove();
            } else {
              console.error('Failed to delete comment');
            }
          } catch (error) {
            console.error('Error:', error);
          }
        }
      });
    });
  
    // Video Quality Switcher (Plyr Integration)
    const player = new Plyr('#player');
    const qualitySwitcher = document.createElement('div');
    qualitySwitcher.className = 'plyr__menu--settings plyr__menu--open';
    qualitySwitcher.innerHTML = `
      <div role="menu">
        <button type="button" class="plyr__control" data-quality="low">Low</button>
        <button type="button" class="plyr__control" data-quality="best">best</button>
      </div>
    `;
    player.elements.controls.appendChild(qualitySwitcher);
  
    qualitySwitcher.addEventListener('click', (event) => {
      const quality = event.target.getAttribute('data-quality');
      if (quality) {
        const currentTime = player.currentTime;
        const isPaused = player.paused;
        const videoElement = document.querySelector('#player');
        const newSource = videoElement.querySelector(`source[data-quality="${quality}"]`);
  
        if (newSource) {
          videoElement.src = newSource.getAttribute('src');
          videoElement.load();
          videoElement.addEventListener('loadedmetadata', () => {
            videoElement.currentTime = currentTime;
            if (!isPaused) {
              videoElement.play();
            }
          }, { once: true });
        }
      }
    });
  
    // Handling Reply Button in Comments
    document.querySelectorAll('.reply-btn').forEach(button => {
      button.addEventListener('click', function() {
        const commentId = this.dataset.commentId;
        const replyForm = document.getElementById(`reply-form-${commentId}`);
        replyForm.classList.toggle('show');
      });
    });
  
    // Handling Comment Likes
    document.querySelectorAll('.comment-like-form').forEach(form => {
      form.addEventListener('submit', function(event) {
        event.preventDefault();
        fetch(form.action, {
          method: form.method,
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(Object.fromEntries(new FormData(form)))
        }).then(response => response.json())
        .then(data => {
          if (data.success) {
            const likeIcon = form.querySelector('.material-icons');
            likeIcon.textContent = likeIcon.textContent === 'thumb_up' ? 'thumb_up_off_alt' : 'thumb_up';
            form.nextElementSibling.textContent = `${data.likesCount} likes`;
          } else {
            alert(data.message);
          }
        });
      });
    });
  });
  </script>
  